* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

/* # exercise-1 */

.exercise-1 {
  display: grid;
  grid-template-columns: 1fr 2fr;
  grid-template-rows: repeat(3, 10vh);
  gap: 10px;
}

.exercise-1 div {
  background-color: darkblue;
  border: 2px solid darkcyan;
  color: white;
  border-radius: 5px;
  padding: 5px;
}

.one {
  grid-column: 1 / 3;
  grid-row: 1 / 2;
}

.two {
  grid-column: 1 / 2;
  grid-row: 2 / 3;
}

.three {
  grid-column: 2 / 3;
  grid-row: 2 / 3;
  text-align: center;
}

.four {
  grid-column: 2 / 3;
  grid-row: 3 / 4;
}

/* # exercise-2 */

/* ! Variante 1 */

/* .flex_container {
  display: flex;
  justify-content: center;
  align-items: center;
}

.exercise-2 {
  position: relative;
  background-color: red;
  border: 2px solid green;
}

.exercise-2 div {
  padding: 5px;
  width: 20vw;
  height: 10vh;
  border-radius: 5px;
  color: white;
}

.item1 {
  background-color: gray;
}

.item2 {
  position: absolute;
  left: 50%;
  top: 50%;
  background-color: rgba(255, 81, 220, 0.314);
} */

/* ! Variante 2 */

/* ! ACHTUNG! Sobald wir mit display: grid arbeiten, dürfen die Kindelemente keine festen Größen erhalten!  */

.exercise-2 {
  display: grid;
  grid-template-columns: 1fr 2fr 1fr;
  grid-template-rows: repeat(3, 100px);
  padding: 5% 20%;
}

.exercise-2 div {
  padding: 5px;
  border-radius: 5px;
  color: white;
}

.item1 {
  background-color: gray;
  border: 2px solid darkgray;
  grid-column: 1 / 3;
  grid-row: 1 / 3;
}

.item2 {
  background-color: rgb(255, 81, 220);
  border: 2px solid rgb(255, 81, 220);
  opacity: 70%;
  grid-column: 2 / 4;
  grid-row: 2 / 4;
}

/* # exercise-3 */

.exercise-3 {
  padding: 5% 20%;
  display: grid;
  grid-template-columns: repeat(3, 1fr);
  /* grid-template-rows: das lassen wir weg, weil die Kindelemente von uns die Höhe und Breite bekommen */
  /* grid-template-rows: repeat(2, 1fr); */
  gap: 10px;
}

.card {
  overflow: hidden;
}

.card img {
  height: 36vh;
  width: 100%;
  object-fit: cover;
  display: block;
  transition: all 0.3s ease-in-out;
}

.card img:hover {
  transform: scale(1.2);
}

/* # NICE TO KNOW */

.box {
  background-color: teal;
  color: white;
  border-radius: 5px;
  padding: 20px;
  font-size: 1.2rem;
}

/* ! minmax() */
/* die Werte in den runden Klammern geben eine minimale und maximale Höhe und Breite an */
/* => 1. Wert min, 2. Wert max */

.section__minmax {
  display: grid;
  grid-template-columns: minmax(200px, 1fr) 200px 200px;
  /* Spalte A ist min. 200px, aber kann wachsen */
  gap: 10px;
}

/* ! auto-fill */
/* fügt immer neue Spalten hinzu (selbst wenn sie leer bleiben) */
/* ! Es füllt die Zeilen mit so vielen Spalten wie möglich, basierend auf der verfügbaren Breite. Wenn es nicht genug Inhalt gibt, bleiben leere Spalten im Grid */

.autofill,
.autofill-2 {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
  gap: 10px;
}

/* ? Warum auto? */
/* auto bei grid-column oder grid-row bedeutet: "Fang da an, wo es Platz gibt." - also keine festen Werte */

/* ? Das bedeutet, dass Element beginnt an der nächsten freien Spalte (auto), spannt sich über 2 Spalten hinweg. */

.autofill-2 .a {
  background-color: aqua;
  grid-column: auto / span 2;
}

.autofill-2 .k {
  background-color: beige;
  grid-column: auto / span 2;
}

.autofill-2 .g {
  background-color: burlywood;
  grid-column: auto / span 2;
  grid-row: auto / span 2;
}

/* ! auto-fill vs. auto-fit */

.container {
  display: grid;
}

/* ! auto-fill: behaltet die Struktur bei, auch wenn leere Spalten vorhanden sind bzw. wenn es mehr Platz gibt */

.fill {
  grid-template-columns: repeat(auto-fill, minmax(100px, 1fr));
}

/* ! auto-fit: passt die Struktur an, sodass leere Spalten verschwinden und die Elemente den verfügbaren Platz füllen */

.fit {
  grid-template-columns: repeat(auto-fit, minmax(100px, 1fr));
}

.grid-element {
  background-color: deeppink;
  padding: 20px;
  color: white;
  border: 1px solid gray;
}
