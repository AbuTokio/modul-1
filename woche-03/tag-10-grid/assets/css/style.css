* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

/* Display Grid arbeitet auch wie vorher mit solchen Einheiten bzw. Units => */
/* px, vw, vh, % */
/* ? => fr ===> fraction, was ist überhaupt fraction? Ein Anteil am noch verfügbaren Platz im Grid Container */

body {
  height: 100vh;
  min-height: 100vh;
  display: grid;
  grid-template-columns: 90vw 10vw;
  grid-template-rows: 50px 1fr 80px;
  /* # Variante 1 */
  grid-template-areas:
    "header header"
    "main aside"
    "footer aside";
}

/* grid-area wird immer in den Kindelement-Block geschrieben und hat eine direkte Beziehung zu grid-template-areas */
/* bei grid-area kann man selbst Namen aussuchen und dafür gibt es keine festen Regeln */

header {
  background-color: peru;
  grid-area: header;
}

main {
  background-color: limegreen;
  grid-area: main;
  overflow: auto;
}

aside {
  background-color: brown;
  grid-area: aside;
}

footer {
  background-color: blueviolet;
  grid-area: footer;
}

/* Dieser Container ist ein Eltern-Element, d.h. dieser kriegt von uns display: grid*/
section {
  display: grid;
  /* ⬇️ Das ist für die Spalten */
  grid-template-columns: 200px 200px 1fr;
  /* ⬇️ Das ist für die Zeilen bzw. Reihen */
  grid-template-rows: 200px 30vh 200px 300px 100px;
  gap: 20px;
}

section > * {
  border: 1px solid red;
}

/* ! ACHTUNG! Die Kind-Elemente dürfen keine feste Höhe und Breite von uns bekommen */

/* ! Vermeiden */
/* section div {
  width: 200px;
  height: 600px;
} */

/* # Variante 2 */

.box1 {
  background-color: crimson;
  /* grid-column-start: 1;
  grid-column-end: 3;
  grid-row-start: 1;
  grid-row-end: 2; */
  /* ? SHORTCUT */
  grid-column: 1 / 3;
  grid-row: 1 / 2;
}

.box2 {
  background-color: blue;
  grid-column: 3 / 4;
  grid-row: 1 / 3;
}

.box3 {
  background-color: yellow;
  grid-column: 1 / 3;
  grid-row: 2 / 3;
}

.box4 {
  background-color: salmon;
  grid-column: 1 / 4;
  grid-row: 3 / 4;
}

.box5 {
  background-color: green;
  grid-column: 1 / 2;
  grid-row: 4 / 5;
}

.box6 {
  background-color: tomato;
  grid-column: 2 / 3;
  grid-row: 4 / 5;
}

.box7 {
  background-color: purple;
  grid-column: 1 / 4;
  grid-row: 5 / 6;
}

/* ! DISPLAY GRID MIT grid-template-areas */

article {
  display: grid;
  /* grid-template-columns: 1fr 1fr 1fr 1fr; */
  grid-template-columns: repeat(4, 1fr);
  grid-template-rows: repeat(4, 100px);
  grid-template-areas:
    "batman batman aquaman aquaman"
    "deadpool superman ironman ironman"
    "hulk spiderman spiderman spiderman"
    "hulk superwoman superwoman superwoman";
  gap: 30px;
  margin: 30px;
}

.container1 {
  background-color: green;
  display: flex;
  justify-content: center;
  align-items: center;
  grid-area: batman;
}

.container2 {
  grid-area: aquaman;
  background-color: aqua;
}

.container3 {
  grid-area: deadpool;
  background-color: red;
}

.container4 {
  grid-area: superman;
  background-color: black;
  color: white;
}

.container5 {
  background-color: chocolate;
  grid-area: ironman;
  display: grid;
  /* justify-items: center;
  align-items: center; */
  /* ⬇️ SHORTCUT */
  /* place-items: justify-items align-items  */
  place-items: center center;
}

.container6 {
  grid-area: hulk;
  background-color: darkgreen;
}

.container7 {
  grid-area: spiderman;
  background-color: aquamarine;
}

.container8 {
  grid-area: superwoman;
  background-color: deeppink;
}
